from abc import ABC, abstractmethod


class InvalidOperationError(Exception):
    pass


class Stream(ABC):
    def __init__(self):
        self.opened = False
        print("Opened!")

    def open(self):
        if self.opened:
            raise InvalidOperationError("Stream is already Open!")
        self.opened = True

    def close(self):
        if not self.opened:
            raise InvalidOperationError("Stream is already Closed!")
        self.opened = False

    @abstractmethod
    def read(self):
        pass


class FileStream(Stream):
    def read(self):
        print("Reading Data From a file!")


class NetworkStream(Stream):
    def read(self):
        print("Reading Data From a Network!")


# TypeError: Can't instantiate abstract class Stream with abstract method read
stream = Stream()
stream.open()
